# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    mailer_to: "%env(MAILER_TO)%"
    project_dir: "%kernel.project_dir%"
    const_dir: "%project_dir%/src/Constants"
    url_erp: "%env(URL_ERP)%"
    url_erp_gral: "%env(URL_ERP_GRAL)%"

services:
    # default configuration for services in this file
    _defaults:
        autowire: true # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true
        bind:
            $urlErp: '%url_erp%'
            $urlErpGral: '%url_erp_gral%'
        tags: ["doctrine.repository_service"]

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: "../src/*"
        exclude: "../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}"

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: "../src/Controller"
        tags: ["controller.service_arguments"]

    dracoder.user_manager:
        class: Dracoder\UserManager\UserManager
        arguments:
            $entityManager: "@doctrine.orm.entity_manager"
            $passwordEncoder: "@security.user_password_encoder.generic"
            $userClass: App\Entity\User

    Dracoder\UserManager\UserManager:
        alias: "dracoder.user_manager"
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always replace previous ones